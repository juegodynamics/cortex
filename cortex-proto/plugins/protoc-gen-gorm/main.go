package main

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_gorm.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-gorm. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	for _, message := range file.Messages {
		generateMessage(g, message)
	}
}

func generateMessage(g *protogen.GeneratedFile, message *protogen.Message) {
	structName := message.GoIdent.GoName
	g.P("type ", structName, " struct {")
	for _, field := range message.Fields {
		jsonName := field.Desc.Name()
		goName := field.GoName
		goType := fieldGoType(field)
		g.P(goName, " ", goType, " `json:\"", jsonName, "\"`")
	}
	g.P("}")
	g.P()

	// Add conversion methods
	generateConversionMethods(g, structName)
}

func fieldGoType(field *protogen.Field) string {
	switch field.Desc.Kind() {
	case protoreflect.StringKind:
		return "string"
	case protoreflect.Int32Kind:
		return "int32"
	case protoreflect.Int64Kind:
		return "int64"
	case protoreflect.BoolKind:
		return "bool"
	// Add other types as needed
	default:
		return "interface{}"
	}
}

func generateConversionMethods(g *protogen.GeneratedFile, structName string) {
	baseName := strings.TrimSuffix(structName, "DB")
	g.P("func (m *", structName, ") ToProto() *", baseName, " {")
	g.P("    return &", baseName, "{")
	// Add field conversions here
	g.P("    }")
	g.P("}")

	g.P("func (m *", baseName, ") ToGorm() *", structName, " {")
	g.P("    return &", structName, "{")
	// Add field conversions here
	g.P("    }")
	g.P("}")
}
